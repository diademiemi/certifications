---
- name: Set up RKE2
  hosts: awx
  gather_facts: true
  roles:
    - diademiemi.helm
  pre_tasks:
    - name: Ensure Python pip is installed
      ansible.builtin.package:
        name: python3-pip
        state: present

    - name: Ensure kubernetes python module is installed
      ansible.builtin.pip:
        name: kubernetes
        state: present

  tasks:
    - name: Add Nginx Helm config
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path | default(omit) }}"
        definition:
          apiVersion: helm.cattle.io/v1
          kind: HelmChartConfig
          metadata:
            name: rke2-ingress-nginx
            namespace: kube-system
          spec:
            valuesContent: |-
              controller:
                config:
                  use-forwarded-headers: "true"

    # - name: Add nginx ingress Helm repository
    #   kubernetes.core.helm_repository:
    #     name: ingress-nginx
    #     repo_url: "https://kubernetes.github.io/ingress-nginx"

    # - name: "Install nginx ingress"
    #   kubernetes.core.helm:
    #     kubeconfig: "{{ kubeconfig_path }}"
    #     chart_ref: "ingress-nginx/ingress-nginx"
    #     chart_version: "{{ nginx_ingress_version | default(omit) }}"
    #     release_name: "{{ nginx_ingress_release_name | default('ingress-nginx') }}"
    #     namespace: "kube-system"
    #     create_namespace: true
    #     values:
    #       controller:
    #         kind: DaemonSet
    #         hostNetwork: true
    #         hostPort:
    #           enabled: true
    #         service:
    #           enabled: true
    #           type: LoadBalancer
    #           externalTrafficPolicy: Local
    #         publishService:
    #           enabled: false
    #         config:
    #           use-forwarded-headers: "true"

    - name: Add Longhorn Helm repository
      kubernetes.core.helm_repository:
        name: longhorn
        repo_url: "https://charts.longhorn.io"

    - name: "Install Longhorn"
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig_path }}"
        chart_ref: "longhorn/longhorn"
        chart_version: "{{ longhorn_version | default(omit) }}"
        release_name: "{{ longhorn_release_name | default('longhorn') }}"
        namespace: "longhorn-system"
        create_namespace: true
        values:
          persistence:
            defaultClass: "{{ longhorn_default_class | default(true) }}"
            defaultClassReplicaCount: "{{ longhorn_default_replicacount | default(1) }}"
            defaultFsType: "{{ longhorn_default_fs_type | default('xfs') }}"
            reclaimPolicy: "{{ longhorn_default_reclaimpolicy | default('Delete') }}"

    - name: SSL tasks
      when: awx_ssl | default(true)
      block:
        - name: "Add cert-manager repository"
          become: true
          kubernetes.core.helm_repository:
            name: "jetstack"
            repo_url: "https://charts.jetstack.io"

        - name: "Install cert-manager"
          kubernetes.core.helm:
            kubeconfig: "{{ kubeconfig_path | default(omit) }}"
            chart_ref: "jetstack/cert-manager"
            chart_version: "{{ cert_manager_version | default(omit) }}"
            release_name: "{{ cert_manager_release_name | default('cert-manager') }}"
            namespace: "{{ cert_manager_namespace | default('cert-manager') }}"
            create_namespace: true
            values:
              installCRDs: true

        - name: "Add self signed ClusterIssuer"
          kubernetes.core.k8s:
            kubeconfig: "{{ kubeconfig_path | default(omit) }}"
            definition:
              apiVersion: cert-manager.io/v1
              kind: ClusterIssuer
              metadata:
                name: selfsigned-issuer
                namespace: "{{ cert_manager_namespace | default('cert-manager') }}"
              spec:
                selfSigned: {}

        - name: "Create self signed CA certificate"
          kubernetes.core.k8s:
            kubeconfig: "{{ kubeconfig_path | default(omit) }}"
            definition:
              apiVersion: cert-manager.io/v1
              kind: Certificate
              metadata:
                name: selfsigned-ca
                namespace: "{{ cert_manager_namespace | default('cert-manager') }}"
              spec:
                isCA: true
                commonName: selfsigned-ca
                secretName: selfsigned-ca
                privateKey:
                  algorithm: ECDSA
                  size: 256
                issuerRef:
                  name: selfsigned-issuer
                  kind: ClusterIssuer
                  group: cert-manager.io

        - name: "Add self signed CA ClusterIssuer"
          kubernetes.core.k8s:
            kubeconfig: "{{ kubeconfig_path | default(omit) }}"
            definition:
              apiVersion: cert-manager.io/v1
              kind: ClusterIssuer
              metadata:
                name: selfsigned-ca-issuer
                namespace: "{{ cert_manager_namespace | default('cert-manager') }}"
              spec:
                ca:
                  secretName: selfsigned-ca

...
